

#ifndef SYNTHTEST_H
#define SYNTHTEST_H
#include "Synth.h"
#include "Modules.h"


class SynthTest : public Synth
{
    public:
    ModuleConstant param[8];

    SynthTest()
    {
    
        //Define Node Objects
	ModuleSamplePlayer *moduleSamplePlayer_1 = new ModuleSamplePlayer();
	ModuleClockDivider *moduleClockDivider_1 = new ModuleClockDivider();
	ModuleClockDivider *moduleClockDivider_2 = new ModuleClockDivider();
	ModuleClockDivider *moduleClockDivider_3 = new ModuleClockDivider();
	ModuleSamplePlayer *moduleSamplePlayer_2 = new ModuleSamplePlayer();
	ModuleSamplePlayer *moduleSamplePlayer_3 = new ModuleSamplePlayer();
	ModuleMixer3 *moduleMixer3_1 = new ModuleMixer3();
	ModuleBitReducer *moduleBitReducer_1 = new ModuleBitReducer();
	ModuleClock *moduleClock_1 = new ModuleClock(1,50);

	moduleSamplePlayer_1->sample_select = new ModuleConstant(64);
	moduleSamplePlayer_2->sample_select = new ModuleConstant(128);
	moduleSamplePlayer_3->sample_select = new ModuleConstant(256);
	moduleClockDivider_1->clock_input=moduleClock_1;
	moduleSamplePlayer_1->trigger_input=moduleClockDivider_1;
	moduleClockDivider_1->division_input= &amp;param[0];
	moduleClockDivider_2->clock_input=moduleClock_1;
	moduleClockDivider_2->division_input= &amp;param[1];
	moduleClockDivider_3->division_input= &amp;param[2];
	moduleClockDivider_3->clock_input=moduleClock_1;
	moduleSamplePlayer_2->trigger_input=moduleClockDivider_2;
	moduleSamplePlayer_3->trigger_input=moduleClockDivider_3;
	moduleMixer3_1->ch1=moduleSamplePlayer_1;
	moduleMixer3_1->ch2=moduleSamplePlayer_2;
	moduleMixer3_1->ch3=moduleSamplePlayer_3;
	moduleBitReducer_1->audio_input=moduleMixer3_1;
	moduleBitReducer_1->bit_input= &amp;param[3];


	this->last_module = moduleBitReducer_1;
        
    }
};
#endif // SYNTHTEST_H    


/* 

This is espnode86 stuff do not edit

--BEGINESPNODEPATCH--
djIuMS4xCm5ldHdvcmsvYWRkLXBhdGNoIHNhZDQgcm9vdApwYXRjaC9vcGVuIHNhZDQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBtcDZ2IGVzcG5vZGUvbm9kZWxpc3QgTm9kZSUyMFBhbGxldGUKbm9kZS90dXJuLW9uIG1wNnYKcGF0Y2gvYWRkLW5vZGUgc2FkNCBzOHg3
IGVzcG5vZGUvc2FtcGxlcGxheWVyIFNhbXBsZSUyMFBsYXllcgpub2RlL3R1cm4tb24gczh4Nwpub2RlL2FkZC1pbmxldCBzOHg3IHR6NnAgZXNwbm9kZS9zdHJpbmcgdHJpZ2dlcl9pbnB1dCB0cmlnZ2VyX2lucHV0Cm5vZGUvYWRkLWlubGV0IHM4eDcgeTUwYiBl
c3Bub2RlL3N0cmluZyBzYW1wbGVfc2VsZWN0IHNhbXBsZV9zZWxlY3QKbm9kZS9hZGQtb3V0bGV0IHM4eDcgZ2w3ZCBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgaDRudyBlc3Bub2RlL2Nsb2NrIENsb2NrJTIwR2VuCm5vZGUvdHVy
bi1vbiBoNG53Cm5vZGUvYWRkLWlubGV0IGg0bncgNGkweiBlc3Bub2RlL3N0cmluZyBicG0gYnBtCm5vZGUvYWRkLWlubGV0IGg0bncgd3ptOSBlc3Bub2RlL3N0cmluZyBkaXZpc2lvbiBkaXZpc2lvbgpub2RlL2FkZC1vdXRsZXQgaDRudyBoMG1lIGVzcG5vZGUv
c3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB0eG54IGVzcG5vZGUvY2xvY2tkaXZpZGVyIENsb2NrJTIwRGl2aWRlcgpub2RlL3R1cm4tb24gdHhueApub2RlL2FkZC1pbmxldCB0eG54IGJlNW8gZXNwbm9kZS9zdHJpbmcgY2xvY2tfaW5wdXQgY2xv
Y2tfaW5wdXQKbm9kZS9hZGQtaW5sZXQgdHhueCBzOWx4IGVzcG5vZGUvc3RyaW5nIGRpdmlzaW9uX2lucHV0IGRpdmlzaW9uX2lucHV0Cm5vZGUvYWRkLW91dGxldCB0eG54IDc3NGEgZXNwbm9kZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IGwz
N2wgZXNwbm9kZS9tdWx0aXBsZXhlciBNdWx0aXBsZXhlcgpub2RlL3R1cm4tb24gbDM3bApub2RlL2FkZC1vdXRsZXQgbDM3bCBlcnpvIGVzcG5vZGUvc3RyaW5nIFBvdDEgUG90MQpub2RlL2FkZC1vdXRsZXQgbDM3bCB0NGEwIGVzcG5vZGUvc3RyaW5nIFBvdDIg
UG90Mgpub2RlL2FkZC1vdXRsZXQgbDM3bCBzZG4wIGVzcG5vZGUvc3RyaW5nIFBvdDMgUG90Mwpub2RlL2FkZC1vdXRsZXQgbDM3bCA4enJhIGVzcG5vZGUvc3RyaW5nIFBvdDQgUG90NApub2RlL2FkZC1vdXRsZXQgbDM3bCAydmNmIGVzcG5vZGUvc3RyaW5nIFBv
dDUgUG90NQpub2RlL2FkZC1vdXRsZXQgbDM3bCAwNDBrIGVzcG5vZGUvc3RyaW5nIFBvdDYgUG90Ngpub2RlL2FkZC1vdXRsZXQgbDM3bCB6ZjBsIGVzcG5vZGUvc3RyaW5nIFBvdDcgUG90Nwpub2RlL2FkZC1vdXRsZXQgbDM3bCBpeHNiIGVzcG5vZGUvc3RyaW5n
IFBvdDggUG90OApwYXRjaC9hZGQtbm9kZSBzYWQ0IDR2Z2QgZXNwbm9kZS9jbG9ja2RpdmlkZXIgQ2xvY2slMjBEaXZpZGVyCm5vZGUvdHVybi1vbiA0dmdkCm5vZGUvYWRkLWlubGV0IDR2Z2QgbTd5biBlc3Bub2RlL3N0cmluZyBjbG9ja19pbnB1dCBjbG9ja19p
bnB1dApub2RlL2FkZC1pbmxldCA0dmdkIGNiaGkgZXNwbm9kZS9zdHJpbmcgZGl2aXNpb25faW5wdXQgZGl2aXNpb25faW5wdXQKbm9kZS9hZGQtb3V0bGV0IDR2Z2QgbTlvdyBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgcTBhNyBl
c3Bub2RlL2Nsb2NrZGl2aWRlciBDbG9jayUyMERpdmlkZXIKbm9kZS90dXJuLW9uIHEwYTcKbm9kZS9hZGQtaW5sZXQgcTBhNyBnajk3IGVzcG5vZGUvc3RyaW5nIGNsb2NrX2lucHV0IGNsb2NrX2lucHV0Cm5vZGUvYWRkLWlubGV0IHEwYTcgYm9pMiBlc3Bub2Rl
L3N0cmluZyBkaXZpc2lvbl9pbnB1dCBkaXZpc2lvbl9pbnB1dApub2RlL2FkZC1vdXRsZXQgcTBhNyBrd2llIGVzcG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCA1MTN3IGVzcG5vZGUvc2FtcGxlcGxheWVyIFNhbXBsZSUyMFBsYXllcgpu
b2RlL3R1cm4tb24gNTEzdwpub2RlL2FkZC1pbmxldCA1MTN3IDBtNmkgZXNwbm9kZS9zdHJpbmcgdHJpZ2dlcl9pbnB1dCB0cmlnZ2VyX2lucHV0Cm5vZGUvYWRkLWlubGV0IDUxM3cgOXZhcyBlc3Bub2RlL3N0cmluZyBzYW1wbGVfc2VsZWN0IHNhbXBsZV9zZWxl
Y3QKbm9kZS9hZGQtb3V0bGV0IDUxM3cgY3I0eCBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgeGg1YyBlc3Bub2RlL3NhbXBsZXBsYXllciBTYW1wbGUlMjBQbGF5ZXIKbm9kZS90dXJuLW9uIHhoNWMKbm9kZS9hZGQtaW5sZXQgeGg1
YyBqeHJtIGVzcG5vZGUvc3RyaW5nIHRyaWdnZXJfaW5wdXQgdHJpZ2dlcl9pbnB1dApub2RlL2FkZC1pbmxldCB4aDVjIGNucXEgZXNwbm9kZS9zdHJpbmcgc2FtcGxlX3NlbGVjdCBzYW1wbGVfc2VsZWN0Cm5vZGUvYWRkLW91dGxldCB4aDVjIGtpY3IgZXNwbm9k
ZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IG5qeWggZXNwbm9kZS9taXhlcjMgMyUyMENoJTIwTWl4ZXIKbm9kZS90dXJuLW9uIG5qeWgKbm9kZS9hZGQtaW5sZXQgbmp5aCAzZmFnIGVzcG5vZGUvc3RyaW5nIGNoMSBjaDEKbm9kZS9hZGQtaW5s
ZXQgbmp5aCByMHZ1IGVzcG5vZGUvc3RyaW5nIGNoMiBjaDIKbm9kZS9hZGQtaW5sZXQgbmp5aCBqbGNjIGVzcG5vZGUvc3RyaW5nIGNoMyBjaDMKbm9kZS9hZGQtb3V0bGV0IG5qeWggM2lmNSBlc3Bub2RlL3N0cmluZyBPdXQgT3V0CnBhdGNoL2FkZC1ub2RlIHNh
ZDQgNnUxcSBlc3Bub2RlL2RhYyBBdWRpbyUyMERBQwpub2RlL3R1cm4tb24gNnUxcQpub2RlL2FkZC1pbmxldCA2dTFxIGgzejMgZXNwbm9kZS9zdHJpbmcgYXVkaW9faW5wdXQgYXVkaW9faW5wdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBkOXNwIGVzcG5vZGUvY29u
c3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIGQ5c3AKbm9kZS9hZGQtaW5sZXQgZDlzcCBnMWtkIGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgZDlzcCA2d3dlIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIK
cGF0Y2gvYWRkLW5vZGUgc2FkNCB3NWF6IGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIHc1YXoKbm9kZS9hZGQtaW5sZXQgdzVheiB1MmZjIGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgdzVh
eiBtZGI5IGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCA3eHJ4IGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIDd4cngKbm9kZS9hZGQtaW5sZXQgN3hyeCB2ZmZtIGVzcG5vZGUvc3RyaW5nIHVzZXIt
dmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgN3hyeCBzcndiIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCBwODlmIGVzcG5vZGUvYml0Y3J1c2hlciBCaXQlMjBDcnVzaGVyCm5vZGUvdHVybi1vbiBwODlmCm5v
ZGUvYWRkLWlubGV0IHA4OWYgcG5vNiBlc3Bub2RlL3N0cmluZyBhdWRpb19pbnB1dCBhdWRpb19pbnB1dApub2RlL2FkZC1pbmxldCBwODlmIHhzZGwgZXNwbm9kZS9zdHJpbmcgYml0X2lucHV0IGJpdF9pbnB1dApub2RlL2FkZC1vdXRsZXQgcDg5ZiBubGQ0IGVz
cG5vZGUvc3RyaW5nIE91dCBPdXQKbm9kZS9tb3ZlIG1wNnYgMzAgMjAKbm9kZS9tb3ZlIHM4eDcgNzk4IDEzMQpub2RlL21vdmUgaDRudyAyNTUgNzIKbm9kZS9tb3ZlIHR4bnggNTcwIDEyNwpub2RlL21vdmUgbDM3bCAzMDIgMjAyCm5vZGUvbW92ZSA0dmdkIDU3
MSAyMzAKbm9kZS9tb3ZlIHEwYTcgNTY3IDMzNwpub2RlL21vdmUgNTEzdyA4MTEgMjQzCm5vZGUvbW92ZSB4aDVjIDgwMSAzNDgKbm9kZS9tb3ZlIG5qeWggMTA1NiAyMjYKbm9kZS9tb3ZlIDZ1MXEgMTMwMCAyMzkKbm9kZS9tb3ZlIGQ5c3AgNzQyIDUwOQpub2Rl
L21vdmUgdzVheiA3NDggNjEzCm5vZGUvbW92ZSA3eHJ4IDU3NSA0OTkKbm9kZS9tb3ZlIHA4OWYgMTE4MiAzNjAKb3V0bGV0L2Nvbm5lY3QgaDBtZSBiZTVvIGlkdHEKb3V0bGV0L2Nvbm5lY3QgNzc0YSB0ejZwIG5xZjMKb3V0bGV0L2Nvbm5lY3QgZXJ6byBzOWx4
IDJmbjcKb3V0bGV0L2Nvbm5lY3QgaDBtZSBtN3luIGw0cTYKb3V0bGV0L2Nvbm5lY3QgdDRhMCBjYmhpIGFwYWEKb3V0bGV0L2Nvbm5lY3Qgc2RuMCBib2kyIGw1bG4Kb3V0bGV0L2Nvbm5lY3QgaDBtZSBnajk3IGl2ZzYKb3V0bGV0L2Nvbm5lY3QgbTlvdyAwbTZp
IG9tZnYKb3V0bGV0L2Nvbm5lY3Qga3dpZSBqeHJtIHEydTkKb3V0bGV0L2Nvbm5lY3QgZ2w3ZCAzZmFnIGxxdmcKb3V0bGV0L2Nvbm5lY3QgY3I0eCByMHZ1IDRqZWQKb3V0bGV0L2Nvbm5lY3Qga2ljciBqbGNjIDBvcGUKb3V0bGV0L2Nvbm5lY3Qgc3J3YiB5NTBi
IDR4bXcKb3V0bGV0L2Nvbm5lY3QgNnd3ZSA5dmFzIDF5YTcKb3V0bGV0L2Nvbm5lY3QgbWRiOSBjbnFxIDVsYTEKb3V0bGV0L2Nvbm5lY3QgM2lmNSBwbm82IG1oeDIKb3V0bGV0L2Nvbm5lY3QgbmxkNCBoM3ozIGJ0dHIKb3V0bGV0L2Nvbm5lY3QgOHpyYSB4c2Rs
IHBrN3kKbm9kZS91cGRhdGUtaW5sZXQgczh4NyB0ejZwIHRyaWdnZXJfaW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCBzOHg3IHk1MGIgc2FtcGxlX3NlbGVjdCA2NApub2RlL3VwZGF0ZS1pbmxldCBoNG53IDRpMHogYnBtIDEKbm9kZS91cGRhdGUtaW5sZXQgaDRu
dyB3em05IGRpdmlzaW9uIDUwCm5vZGUvdXBkYXRlLWlubGV0IHR4bnggYmU1byBjbG9ja19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IHR4bnggczlseCBkaXZpc2lvbl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDR2Z2QgbTd5biBjbG9ja19pbnB1dCAwCm5v
ZGUvdXBkYXRlLWlubGV0IDR2Z2QgY2JoaSBkaXZpc2lvbl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IHEwYTcgZ2o5NyBjbG9ja19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IHEwYTcgYm9pMiBkaXZpc2lvbl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDUx
M3cgMG02aSB0cmlnZ2VyX2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgNTEzdyA5dmFzIHNhbXBsZV9zZWxlY3QgMTI4Cm5vZGUvdXBkYXRlLWlubGV0IHhoNWMganhybSB0cmlnZ2VyX2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgeGg1YyBjbnFxIHNhbXBsZV9z
ZWxlY3QgMjU2Cm5vZGUvdXBkYXRlLWlubGV0IDZ1MXEgaDN6MyBhdWRpb19pbnB1dCAwCm5vZGUvdXBkYXRlLW91dGxldCBkOXNwIDZ3d2UgbnVtYmVyIDEyOApub2RlL3VwZGF0ZS1pbmxldCBkOXNwIGcxa2QgdXNlci12YWx1ZSAxMjgKbm9kZS91cGRhdGUtb3V0
bGV0IHc1YXogbWRiOSBudW1iZXIgMjU2Cm5vZGUvdXBkYXRlLWlubGV0IHc1YXogdTJmYyB1c2VyLXZhbHVlIDI1Ngpub2RlL3VwZGF0ZS1vdXRsZXQgN3hyeCBzcndiIG51bWJlciA2NApub2RlL3VwZGF0ZS1pbmxldCA3eHJ4IHZmZm0gdXNlci12YWx1ZSA2NApu
b2RlL3VwZGF0ZS1pbmxldCBwODlmIHBubzYgYXVkaW9faW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCBwODlmIHhzZGwgYml0X2lucHV0IDA=
--ENDESPNODEPATCH--

*/

