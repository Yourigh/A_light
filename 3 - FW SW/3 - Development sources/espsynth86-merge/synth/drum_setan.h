
#ifndef SYNTHTEST_H
#define SYNTHTEST_H
#include "Synth.h"
#include "Modules.h"


class SynthTest : public Synth
{
    public:
    ModuleConstant param[8];

    SynthTest()
    {
    
        //Define Node Objects
	ModuleSamplePlayer *moduleSamplePlayer_1 = new ModuleSamplePlayer();
	ModuleClockDivider *moduleClockDivider_1 = new ModuleClockDivider();
	ModuleClockDivider *moduleClockDivider_2 = new ModuleClockDivider();
	ModuleClockDivider *moduleClockDivider_3 = new ModuleClockDivider();
	ModuleSamplePlayer *moduleSamplePlayer_2 = new ModuleSamplePlayer();
	ModuleSamplePlayer *moduleSamplePlayer_3 = new ModuleSamplePlayer();
	ModuleMixer3 *moduleMixer3_1 = new ModuleMixer3();
	ModuleClock *moduleClock_1 = new ModuleClock(1,50);
    ModuleBitReducer *crush = new ModuleBitReducer();

	moduleSamplePlayer_1->sample_select = new ModuleConstant(64);
	moduleSamplePlayer_2->sample_select = new ModuleConstant(128);
	moduleSamplePlayer_3->sample_select = new ModuleConstant(256);
	moduleClockDivider_1->clock_input=moduleClock_1;
	moduleSamplePlayer_1->trigger_input=moduleClockDivider_1;
    moduleClockDivider_1->division_input= &param[3];
	moduleClockDivider_2->clock_input=moduleClock_1;
    moduleClockDivider_2->division_input= &param[1];
    moduleClockDivider_3->division_input= &param[2];
	moduleClockDivider_3->clock_input=moduleClock_1;
	moduleSamplePlayer_2->trigger_input=moduleClockDivider_2;
	moduleSamplePlayer_3->trigger_input=moduleClockDivider_3;
	moduleMixer3_1->ch1=moduleSamplePlayer_1;
	moduleMixer3_1->ch2=moduleSamplePlayer_2;
	moduleMixer3_1->ch3=moduleSamplePlayer_3;

    crush->audio_input = moduleMixer3_1;
    crush->bit_input = new ModuleConstant(1000);

    this->last_module = crush;
        
    }
};
#endif // SYNTHTEST_H    


/* 

This is espnode86 stuff do not edit

--BEGINESPNODEPATCH--
djIuMS4xCm5ldHdvcmsvYWRkLXBhdGNoIHNhZDQgcm9vdApwYXRjaC9vcGVuIHNhZDQKcGF0Y2gvYWRkLW5vZGUgc2FkNCAzMW41IGVzcG5vZGUvbm9kZWxpc3QgTm9kZSUyMFBhbGxldGUKbm9kZS90dXJuLW9uIDMxbjUKcGF0Y2gvYWRkLW5vZGUgc2FkNCB4OGlm
IGVzcG5vZGUvc2FtcGxlcGxheWVyIFNhbXBsZSUyMFBsYXllcgpub2RlL3R1cm4tb24geDhpZgpub2RlL2FkZC1pbmxldCB4OGlmIHl1dmIgZXNwbm9kZS9zdHJpbmcgdHJpZ2dlcl9pbnB1dCB0cmlnZ2VyX2lucHV0Cm5vZGUvYWRkLWlubGV0IHg4aWYgejY2bSBl
c3Bub2RlL3N0cmluZyBzYW1wbGVfc2VsZWN0IHNhbXBsZV9zZWxlY3QKbm9kZS9hZGQtb3V0bGV0IHg4aWYgejQ2cCBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgOXJoaSBlc3Bub2RlL2Nsb2NrIENsb2NrJTIwR2VuCm5vZGUvdHVy
bi1vbiA5cmhpCm5vZGUvYWRkLWlubGV0IDlyaGkgYzJjeSBlc3Bub2RlL3N0cmluZyBicG0gYnBtCm5vZGUvYWRkLWlubGV0IDlyaGkgZXpnYSBlc3Bub2RlL3N0cmluZyBkaXZpc2lvbiBkaXZpc2lvbgpub2RlL2FkZC1vdXRsZXQgOXJoaSBhN2I3IGVzcG5vZGUv
c3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBleHhjIGVzcG5vZGUvY2xvY2tkaXZpZGVyIENsb2NrJTIwRGl2aWRlcgpub2RlL3R1cm4tb24gZXh4Ywpub2RlL2FkZC1pbmxldCBleHhjIGZmZXggZXNwbm9kZS9zdHJpbmcgY2xvY2tfaW5wdXQgY2xv
Y2tfaW5wdXQKbm9kZS9hZGQtaW5sZXQgZXh4YyBvdWtsIGVzcG5vZGUvc3RyaW5nIGRpdmlzaW9uX2lucHV0IGRpdmlzaW9uX2lucHV0Cm5vZGUvYWRkLW91dGxldCBleHhjIGhobDIgZXNwbm9kZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IHhx
bXcgZXNwbm9kZS9tdWx0aXBsZXhlciBNdWx0aXBsZXhlcgpub2RlL3R1cm4tb24geHFtdwpub2RlL2FkZC1vdXRsZXQgeHFtdyBmbG12IGVzcG5vZGUvc3RyaW5nIFBvdDEgUG90MQpub2RlL2FkZC1vdXRsZXQgeHFtdyB4bXRpIGVzcG5vZGUvc3RyaW5nIFBvdDIg
UG90Mgpub2RlL2FkZC1vdXRsZXQgeHFtdyBjanlwIGVzcG5vZGUvc3RyaW5nIFBvdDMgUG90Mwpub2RlL2FkZC1vdXRsZXQgeHFtdyB1bzl6IGVzcG5vZGUvc3RyaW5nIFBvdDQgUG90NApub2RlL2FkZC1vdXRsZXQgeHFtdyBjcXhoIGVzcG5vZGUvc3RyaW5nIFBv
dDUgUG90NQpub2RlL2FkZC1vdXRsZXQgeHFtdyBxMzNpIGVzcG5vZGUvc3RyaW5nIFBvdDYgUG90Ngpub2RlL2FkZC1vdXRsZXQgeHFtdyBldnRmIGVzcG5vZGUvc3RyaW5nIFBvdDcgUG90Nwpub2RlL2FkZC1vdXRsZXQgeHFtdyB0bGU4IGVzcG5vZGUvc3RyaW5n
IFBvdDggUG90OApwYXRjaC9hZGQtbm9kZSBzYWQ0IDl4eWYgZXNwbm9kZS9jbG9ja2RpdmlkZXIgQ2xvY2slMjBEaXZpZGVyCm5vZGUvdHVybi1vbiA5eHlmCm5vZGUvYWRkLWlubGV0IDl4eWYgMGRpayBlc3Bub2RlL3N0cmluZyBjbG9ja19pbnB1dCBjbG9ja19p
bnB1dApub2RlL2FkZC1pbmxldCA5eHlmIHB4b3ggZXNwbm9kZS9zdHJpbmcgZGl2aXNpb25faW5wdXQgZGl2aXNpb25faW5wdXQKbm9kZS9hZGQtb3V0bGV0IDl4eWYgM3JzNSBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgZzl2NyBl
c3Bub2RlL2Nsb2NrZGl2aWRlciBDbG9jayUyMERpdmlkZXIKbm9kZS90dXJuLW9uIGc5djcKbm9kZS9hZGQtaW5sZXQgZzl2NyBidjc1IGVzcG5vZGUvc3RyaW5nIGNsb2NrX2lucHV0IGNsb2NrX2lucHV0Cm5vZGUvYWRkLWlubGV0IGc5djcganMyeCBlc3Bub2Rl
L3N0cmluZyBkaXZpc2lvbl9pbnB1dCBkaXZpc2lvbl9pbnB1dApub2RlL2FkZC1vdXRsZXQgZzl2NyBidXNpIGVzcG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBnZnQ4IGVzcG5vZGUvc2FtcGxlcGxheWVyIFNhbXBsZSUyMFBsYXllcgpu
b2RlL3R1cm4tb24gZ2Z0OApub2RlL2FkZC1pbmxldCBnZnQ4IGdkeG0gZXNwbm9kZS9zdHJpbmcgdHJpZ2dlcl9pbnB1dCB0cmlnZ2VyX2lucHV0Cm5vZGUvYWRkLWlubGV0IGdmdDggeHd4ZSBlc3Bub2RlL3N0cmluZyBzYW1wbGVfc2VsZWN0IHNhbXBsZV9zZWxl
Y3QKbm9kZS9hZGQtb3V0bGV0IGdmdDggcnQ2aSBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgbXJxcSBlc3Bub2RlL3NhbXBsZXBsYXllciBTYW1wbGUlMjBQbGF5ZXIKbm9kZS90dXJuLW9uIG1ycXEKbm9kZS9hZGQtaW5sZXQgbXJx
cSB2MTNsIGVzcG5vZGUvc3RyaW5nIHRyaWdnZXJfaW5wdXQgdHJpZ2dlcl9pbnB1dApub2RlL2FkZC1pbmxldCBtcnFxIGwzNXAgZXNwbm9kZS9zdHJpbmcgc2FtcGxlX3NlbGVjdCBzYW1wbGVfc2VsZWN0Cm5vZGUvYWRkLW91dGxldCBtcnFxIHR5aDAgZXNwbm9k
ZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IDR1czUgZXNwbm9kZS9taXhlcjMgMyUyMENoJTIwTWl4ZXIKbm9kZS90dXJuLW9uIDR1czUKbm9kZS9hZGQtaW5sZXQgNHVzNSBjMXJyIGVzcG5vZGUvc3RyaW5nIGNoMSBjaDEKbm9kZS9hZGQtaW5s
ZXQgNHVzNSBtaGowIGVzcG5vZGUvc3RyaW5nIGNoMiBjaDIKbm9kZS9hZGQtaW5sZXQgNHVzNSB2eGd4IGVzcG5vZGUvc3RyaW5nIGNoMyBjaDMKbm9kZS9hZGQtb3V0bGV0IDR1czUgdmk3ZiBlc3Bub2RlL3N0cmluZyBPdXQgT3V0CnBhdGNoL2FkZC1ub2RlIHNh
ZDQgMnc5cyBlc3Bub2RlL2RhYyBBdWRpbyUyMERBQwpub2RlL3R1cm4tb24gMnc5cwpub2RlL2FkZC1pbmxldCAydzlzIGZ5OXkgZXNwbm9kZS9zdHJpbmcgYXVkaW9faW5wdXQgYXVkaW9faW5wdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB0bWM2IGVzcG5vZGUvY29u
c3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIHRtYzYKbm9kZS9hZGQtaW5sZXQgdG1jNiA1b3d6IGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgdG1jNiA4N21nIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIK
cGF0Y2gvYWRkLW5vZGUgc2FkNCBnOWN1IGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIGc5Y3UKbm9kZS9hZGQtaW5sZXQgZzljdSA0MDkxIGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgZzlj
dSBkdm1iIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCA4MzVoIGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIDgzNWgKbm9kZS9hZGQtaW5sZXQgODM1aCB2dWRsIGVzcG5vZGUvc3RyaW5nIHVzZXIt
dmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgODM1aCBlbndyIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCAxOHlvIGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIDE4eW8Kbm9kZS9hZGQt
aW5sZXQgMTh5byBrY2NpIGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgMTh5byA0amhvIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCBpem0xIGVzcG5vZGUvY29uc3RhbnQg
Q29uc3RhbnQKbm9kZS90dXJuLW9uIGl6bTEKbm9kZS9hZGQtaW5sZXQgaXptMSB1bm43IGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgaXptMSB0ZWc2IGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gv
YWRkLW5vZGUgc2FkNCA2aXkxIGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIDZpeTEKbm9kZS9hZGQtaW5sZXQgNml5MSBhZnlxIGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgNml5MSB2Znk1
IGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKbm9kZS9tb3ZlIDMxbjUgMzAgMjAKbm9kZS9tb3ZlIHg4aWYgNzk4IDEzMQpub2RlL21vdmUgOXJoaSAyNTUgNzIKbm9kZS9tb3ZlIGV4eGMgNTcwIDEyNwpub2RlL21vdmUgeHFtdyAzMDIgMjAyCm5vZGUvbW92
ZSA5eHlmIDU3MSAyMzAKbm9kZS9tb3ZlIGc5djcgNTY3IDMzNwpub2RlL21vdmUgZ2Z0OCA4MTEgMjQzCm5vZGUvbW92ZSBtcnFxIDgwMSAzNDgKbm9kZS9tb3ZlIDR1czUgMTA1NiAyMjYKbm9kZS9tb3ZlIDJ3OXMgMTMwMCAyMzkKbm9kZS9tb3ZlIHRtYzYgNzQy
IDUwOQpub2RlL21vdmUgZzljdSA3NDggNjEzCm5vZGUvbW92ZSA4MzVoIDU3NSA0OTkKbm9kZS9tb3ZlIDE4eW8gMTAxOCA1ODEKbm9kZS9tb3ZlIGl6bTEgOTQ4IDQ3Ngpub2RlL21vdmUgNml5MSA5NzUgMzYzCm91dGxldC9jb25uZWN0IGE3YjcgZmZleCA3a3hm
Cm91dGxldC9jb25uZWN0IGhobDIgeXV2YiB3eWxlCm91dGxldC9jb25uZWN0IGZsbXYgb3VrbCByODBxCm91dGxldC9jb25uZWN0IGE3YjcgMGRpayBpeTFnCm91dGxldC9jb25uZWN0IHhtdGkgcHhveCBxaW13Cm91dGxldC9jb25uZWN0IGNqeXAganMyeCBrcmdq
Cm91dGxldC9jb25uZWN0IGE3YjcgYnY3NSBuNzBnCm91dGxldC9jb25uZWN0IDNyczUgZ2R4bSA0OWt5Cm91dGxldC9jb25uZWN0IGJ1c2kgdjEzbCBwaDExCm91dGxldC9jb25uZWN0IHo0NnAgYzFyciBhNnp3Cm91dGxldC9jb25uZWN0IHJ0NmkgbWhqMCBseGZp
Cm91dGxldC9jb25uZWN0IHR5aDAgdnhneCB6eG55Cm91dGxldC9jb25uZWN0IGVud3IgejY2bSByajV1Cm91dGxldC9jb25uZWN0IDg3bWcgeHd4ZSBweHZxCm91dGxldC9jb25uZWN0IGR2bWIgbDM1cCA5eWNxCm91dGxldC9jb25uZWN0IHZpN2YgZnk5eSBjeDlj
Cm5vZGUvdXBkYXRlLWlubGV0IHg4aWYgeXV2YiB0cmlnZ2VyX2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgeDhpZiB6NjZtIHNhbXBsZV9zZWxlY3QgNjQKbm9kZS91cGRhdGUtaW5sZXQgOXJoaSBjMmN5IGJwbSAxCm5vZGUvdXBkYXRlLWlubGV0IDlyaGkgZXpn
YSBkaXZpc2lvbiA1MApub2RlL3VwZGF0ZS1pbmxldCBleHhjIGZmZXggY2xvY2tfaW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCBleHhjIG91a2wgZGl2aXNpb25faW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCA5eHlmIDBkaWsgY2xvY2tfaW5wdXQgMApub2RlL3Vw
ZGF0ZS1pbmxldCA5eHlmIHB4b3ggZGl2aXNpb25faW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCBnOXY3IGJ2NzUgY2xvY2tfaW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCBnOXY3IGpzMnggZGl2aXNpb25faW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCBnZnQ4IGdk
eG0gdHJpZ2dlcl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGdmdDggeHd4ZSBzYW1wbGVfc2VsZWN0IDEyOApub2RlL3VwZGF0ZS1pbmxldCBtcnFxIHYxM2wgdHJpZ2dlcl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IG1ycXEgbDM1cCBzYW1wbGVfc2VsZWN0
IDI1Ngpub2RlL3VwZGF0ZS1vdXRsZXQgdG1jNiA4N21nIG51bWJlciAxMjgKbm9kZS91cGRhdGUtaW5sZXQgdG1jNiA1b3d6IHVzZXItdmFsdWUgMTI4Cm5vZGUvdXBkYXRlLW91dGxldCBnOWN1IGR2bWIgbnVtYmVyIDI1Ngpub2RlL3VwZGF0ZS1pbmxldCBnOWN1
IDQwOTEgdXNlci12YWx1ZSAyNTYKbm9kZS91cGRhdGUtb3V0bGV0IDgzNWggZW53ciBudW1iZXIgNjQKbm9kZS91cGRhdGUtaW5sZXQgODM1aCB2dWRsIHVzZXItdmFsdWUgNjQKbm9kZS91cGRhdGUtb3V0bGV0IDE4eW8gNGpobyBudW1iZXIgMTAyMwpub2RlL3Vw
ZGF0ZS1pbmxldCAxOHlvIGtjY2kgdXNlci12YWx1ZSAxMDIzCm5vZGUvdXBkYXRlLW91dGxldCBpem0xIHRlZzYgbnVtYmVyIDQwMApub2RlL3VwZGF0ZS1pbmxldCBpem0xIHVubjcgdXNlci12YWx1ZSA0MDAKbm9kZS91cGRhdGUtb3V0bGV0IDZpeTEgdmZ5NSBu
dW1iZXIgNDAwCm5vZGUvdXBkYXRlLWlubGV0IDZpeTEgYWZ5cSB1c2VyLXZhbHVlIDQwMA==
--ENDESPNODEPATCH--

*/

