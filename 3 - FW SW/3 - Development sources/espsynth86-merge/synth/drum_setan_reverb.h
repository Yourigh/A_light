#ifndef SYNTHTEST_H
#define SYNTHTEST_H
#include "Synth.h"
#include "Modules.h"


class SynthTest : public Synth
{
    public:
    ModuleConstant param[8];

    SynthTest()
    {

        //Define Node Objects
    ModuleSamplePlayer *moduleSamplePlayer_1 = new ModuleSamplePlayer();
    ModuleClockDivider *moduleClockDivider_1 = new ModuleClockDivider();
    ModuleClockDivider *moduleClockDivider_2 = new ModuleClockDivider();
    ModuleClockDivider *moduleClockDivider_3 = new ModuleClockDivider();
    ModuleSamplePlayer *moduleSamplePlayer_2 = new ModuleSamplePlayer();
    ModuleSamplePlayer *moduleSamplePlayer_3 = new ModuleSamplePlayer();
    ModuleMixer3 *moduleMixer3_1 = new ModuleMixer3();
    ModuleReverb *moduleReverb_1 = new ModuleReverb();
    ModuleClock *moduleClock_1 = new ModuleClock(1,50);

    moduleSamplePlayer_1->sample_select = new ModuleConstant(64);
    moduleSamplePlayer_2->sample_select = new ModuleConstant(128);
    moduleSamplePlayer_3->sample_select = new ModuleConstant(256);
    moduleReverb_1->mix_input = new ModuleConstant(400);
    moduleReverb_1->feedback_input = new ModuleConstant(100);
    moduleClockDivider_1->clock_input=moduleClock_1;
    moduleSamplePlayer_1->trigger_input=moduleClockDivider_1;
    moduleClockDivider_1->division_input= &param[1];
    moduleClockDivider_2->clock_input=moduleClock_1;
    moduleClockDivider_2->division_input= &param[2];
    moduleClockDivider_3->division_input= &param[0];
    moduleClockDivider_3->clock_input=moduleClock_1;
    moduleSamplePlayer_2->trigger_input=moduleClockDivider_2;
    moduleSamplePlayer_3->trigger_input=moduleClockDivider_3;
    moduleMixer3_1->ch1=moduleSamplePlayer_1;
    moduleMixer3_1->ch2=moduleSamplePlayer_2;
    moduleMixer3_1->ch3=moduleSamplePlayer_3;
    moduleReverb_1->audio_input=moduleMixer3_1;


    this->last_module = moduleReverb_1;

    }
};
#endif // SYNTHTEST_H


/*

This is espnode86 stuff do not edit

--BEGINESPNODEPATCH--
djIuMS4xCm5ldHdvcmsvYWRkLXBhdGNoIHNhZDQgcm9vdApwYXRjaC9vcGVuIHNhZDQKcGF0Y2gvYWRkLW5vZGUgc2FkNCA4cW81IGVzcG5vZGUvbm9kZWxpc3QgTm9kZSUyMFBhbGxldGUKbm9kZS90dXJuLW9uIDhxbzUKcGF0Y2gvYWRkLW5vZGUgc2FkNCB2Nzd4
IGVzcG5vZGUvc2FtcGxlcGxheWVyIFNhbXBsZSUyMFBsYXllcgpub2RlL3R1cm4tb24gdjc3eApub2RlL2FkZC1pbmxldCB2Nzd4IDFqY3AgZXNwbm9kZS9zdHJpbmcgdHJpZ2dlcl9pbnB1dCB0cmlnZ2VyX2lucHV0Cm5vZGUvYWRkLWlubGV0IHY3N3ggNnk0aSBl
c3Bub2RlL3N0cmluZyBzYW1wbGVfc2VsZWN0IHNhbXBsZV9zZWxlY3QKbm9kZS9hZGQtb3V0bGV0IHY3N3ggbnlvOCBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgM3hxMiBlc3Bub2RlL2Nsb2NrIENsb2NrJTIwR2VuCm5vZGUvdHVy
bi1vbiAzeHEyCm5vZGUvYWRkLWlubGV0IDN4cTIgMGZ5MSBlc3Bub2RlL3N0cmluZyBicG0gYnBtCm5vZGUvYWRkLWlubGV0IDN4cTIgODVlaiBlc3Bub2RlL3N0cmluZyBkaXZpc2lvbiBkaXZpc2lvbgpub2RlL2FkZC1vdXRsZXQgM3hxMiB4azQ4IGVzcG5vZGUv
c3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCBiOHhlIGVzcG5vZGUvY2xvY2tkaXZpZGVyIENsb2NrJTIwRGl2aWRlcgpub2RlL3R1cm4tb24gYjh4ZQpub2RlL2FkZC1pbmxldCBiOHhlIGdoZ2QgZXNwbm9kZS9zdHJpbmcgY2xvY2tfaW5wdXQgY2xv
Y2tfaW5wdXQKbm9kZS9hZGQtaW5sZXQgYjh4ZSBiMWloIGVzcG5vZGUvc3RyaW5nIGRpdmlzaW9uX2lucHV0IGRpdmlzaW9uX2lucHV0Cm5vZGUvYWRkLW91dGxldCBiOHhlIDJ3OG4gZXNwbm9kZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IDk2
YXIgZXNwbm9kZS9tdWx0aXBsZXhlciBNdWx0aXBsZXhlcgpub2RlL3R1cm4tb24gOTZhcgpub2RlL2FkZC1vdXRsZXQgOTZhciB2N2p4IGVzcG5vZGUvc3RyaW5nIFBvdDEgUG90MQpub2RlL2FkZC1vdXRsZXQgOTZhciBzOGo4IGVzcG5vZGUvc3RyaW5nIFBvdDIg
UG90Mgpub2RlL2FkZC1vdXRsZXQgOTZhciBqOWFuIGVzcG5vZGUvc3RyaW5nIFBvdDMgUG90Mwpub2RlL2FkZC1vdXRsZXQgOTZhciBhcDc0IGVzcG5vZGUvc3RyaW5nIFBvdDQgUG90NApub2RlL2FkZC1vdXRsZXQgOTZhciB3OWt3IGVzcG5vZGUvc3RyaW5nIFBv
dDUgUG90NQpub2RlL2FkZC1vdXRsZXQgOTZhciAwaTR0IGVzcG5vZGUvc3RyaW5nIFBvdDYgUG90Ngpub2RlL2FkZC1vdXRsZXQgOTZhciAxNG1vIGVzcG5vZGUvc3RyaW5nIFBvdDcgUG90Nwpub2RlL2FkZC1vdXRsZXQgOTZhciBnenk0IGVzcG5vZGUvc3RyaW5n
IFBvdDggUG90OApwYXRjaC9hZGQtbm9kZSBzYWQ0IGk2dm8gZXNwbm9kZS9jbG9ja2RpdmlkZXIgQ2xvY2slMjBEaXZpZGVyCm5vZGUvdHVybi1vbiBpNnZvCm5vZGUvYWRkLWlubGV0IGk2dm8gNHYzciBlc3Bub2RlL3N0cmluZyBjbG9ja19pbnB1dCBjbG9ja19p
bnB1dApub2RlL2FkZC1pbmxldCBpNnZvIDE2eDUgZXNwbm9kZS9zdHJpbmcgZGl2aXNpb25faW5wdXQgZGl2aXNpb25faW5wdXQKbm9kZS9hZGQtb3V0bGV0IGk2dm8gcm15ZSBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgdms1OSBl
c3Bub2RlL2Nsb2NrZGl2aWRlciBDbG9jayUyMERpdmlkZXIKbm9kZS90dXJuLW9uIHZrNTkKbm9kZS9hZGQtaW5sZXQgdms1OSA2MXIwIGVzcG5vZGUvc3RyaW5nIGNsb2NrX2lucHV0IGNsb2NrX2lucHV0Cm5vZGUvYWRkLWlubGV0IHZrNTkgZXR0dyBlc3Bub2Rl
L3N0cmluZyBkaXZpc2lvbl9pbnB1dCBkaXZpc2lvbl9pbnB1dApub2RlL2FkZC1vdXRsZXQgdms1OSAxd3d2IGVzcG5vZGUvc3RyaW5nIG91dCBvdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB1eHo1IGVzcG5vZGUvc2FtcGxlcGxheWVyIFNhbXBsZSUyMFBsYXllcgpu
b2RlL3R1cm4tb24gdXh6NQpub2RlL2FkZC1pbmxldCB1eHo1IGZ0bjAgZXNwbm9kZS9zdHJpbmcgdHJpZ2dlcl9pbnB1dCB0cmlnZ2VyX2lucHV0Cm5vZGUvYWRkLWlubGV0IHV4ejUgM3RlYSBlc3Bub2RlL3N0cmluZyBzYW1wbGVfc2VsZWN0IHNhbXBsZV9zZWxl
Y3QKbm9kZS9hZGQtb3V0bGV0IHV4ejUgODY5YiBlc3Bub2RlL3N0cmluZyBvdXQgb3V0CnBhdGNoL2FkZC1ub2RlIHNhZDQgd3o0dyBlc3Bub2RlL3NhbXBsZXBsYXllciBTYW1wbGUlMjBQbGF5ZXIKbm9kZS90dXJuLW9uIHd6NHcKbm9kZS9hZGQtaW5sZXQgd3o0
dyBhMHMyIGVzcG5vZGUvc3RyaW5nIHRyaWdnZXJfaW5wdXQgdHJpZ2dlcl9pbnB1dApub2RlL2FkZC1pbmxldCB3ejR3IDR4eXkgZXNwbm9kZS9zdHJpbmcgc2FtcGxlX3NlbGVjdCBzYW1wbGVfc2VsZWN0Cm5vZGUvYWRkLW91dGxldCB3ejR3IDl3cmIgZXNwbm9k
ZS9zdHJpbmcgb3V0IG91dApwYXRjaC9hZGQtbm9kZSBzYWQ0IGt6Y2QgZXNwbm9kZS9taXhlcjMgMyUyMENoJTIwTWl4ZXIKbm9kZS90dXJuLW9uIGt6Y2QKbm9kZS9hZGQtaW5sZXQga3pjZCBpZ2RrIGVzcG5vZGUvc3RyaW5nIGNoMSBjaDEKbm9kZS9hZGQtaW5s
ZXQga3pjZCBuMW93IGVzcG5vZGUvc3RyaW5nIGNoMiBjaDIKbm9kZS9hZGQtaW5sZXQga3pjZCB2azY0IGVzcG5vZGUvc3RyaW5nIGNoMyBjaDMKbm9kZS9hZGQtb3V0bGV0IGt6Y2QgeThvNyBlc3Bub2RlL3N0cmluZyBPdXQgT3V0CnBhdGNoL2FkZC1ub2RlIHNh
ZDQgMjNvcSBlc3Bub2RlL2RhYyBBdWRpbyUyMERBQwpub2RlL3R1cm4tb24gMjNvcQpub2RlL2FkZC1pbmxldCAyM29xIHducTEgZXNwbm9kZS9zdHJpbmcgYXVkaW9faW5wdXQgYXVkaW9faW5wdXQKcGF0Y2gvYWRkLW5vZGUgc2FkNCB1NWZvIGVzcG5vZGUvY29u
c3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIHU1Zm8Kbm9kZS9hZGQtaW5sZXQgdTVmbyBjcjFxIGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgdTVmbyB6ejluIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIK
cGF0Y2gvYWRkLW5vZGUgc2FkNCBlM2U4IGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIGUzZTgKbm9kZS9hZGQtaW5sZXQgZTNlOCA2cnY5IGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgZTNl
OCAwbDhtIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCBvZ3ZwIGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIG9ndnAKbm9kZS9hZGQtaW5sZXQgb2d2cCBqbXI4IGVzcG5vZGUvc3RyaW5nIHVzZXIt
dmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgb2d2cCA5aDU3IGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCBqNmYyIGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIGo2ZjIKbm9kZS9hZGQt
aW5sZXQgajZmMiBtNnp1IGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgajZmMiBrN3VpIGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCAyNHVuIGVzcG5vZGUvY29uc3RhbnQg
Q29uc3RhbnQKbm9kZS90dXJuLW9uIDI0dW4Kbm9kZS9hZGQtaW5sZXQgMjR1biBsb2l0IGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgMjR1biA3Z2c4IGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gv
YWRkLW5vZGUgc2FkNCAzMHVtIGVzcG5vZGUvY29uc3RhbnQgQ29uc3RhbnQKbm9kZS90dXJuLW9uIDMwdW0Kbm9kZS9hZGQtaW5sZXQgMzB1bSBrN2xqIGVzcG5vZGUvc3RyaW5nIHVzZXItdmFsdWUgdXNlci12YWx1ZQpub2RlL2FkZC1vdXRsZXQgMzB1bSBubGE1
IGVzcG5vZGUvc3RyaW5nIG51bWJlciBudW1iZXIKcGF0Y2gvYWRkLW5vZGUgc2FkNCAwNGtqIGVzcG5vZGUvcmV2ZXJiIFJldmVyYgpub2RlL3R1cm4tb24gMDRragpub2RlL2FkZC1pbmxldCAwNGtqIGprMXEgZXNwbm9kZS9zdHJpbmcgYXVkaW9faW5wdXQgYXVk
aW9faW5wdXQKbm9kZS9hZGQtaW5sZXQgMDRraiBkNXV4IGVzcG5vZGUvc3RyaW5nIG1peF9pbnB1dCBtaXhfaW5wdXQKbm9kZS9hZGQtaW5sZXQgMDRraiBhc3B0IGVzcG5vZGUvc3RyaW5nIGZlZWRiYWNrX2lucHV0IGZlZWRiYWNrX2lucHV0Cm5vZGUvYWRkLW91
dGxldCAwNGtqIDBxdncgZXNwbm9kZS9zdHJpbmcgb3V0IG91dApub2RlL21vdmUgOHFvNSAzMCAyMApub2RlL21vdmUgdjc3eCA3OTggMTMxCm5vZGUvbW92ZSAzeHEyIDI1NSA3Mgpub2RlL21vdmUgYjh4ZSA1NzAgMTI3Cm5vZGUvbW92ZSA5NmFyIDMwMiAyMDIK
bm9kZS9tb3ZlIGk2dm8gNTcxIDIzMApub2RlL21vdmUgdms1OSA1NjcgMzM3Cm5vZGUvbW92ZSB1eHo1IDgxMSAyNDMKbm9kZS9tb3ZlIHd6NHcgODAxIDM0OApub2RlL21vdmUga3pjZCAxMDU2IDIyNgpub2RlL21vdmUgMjNvcSAxMzAwIDIzOQpub2RlL21vdmUg
dTVmbyA3NDIgNTA5Cm5vZGUvbW92ZSBlM2U4IDc0OCA2MTMKbm9kZS9tb3ZlIG9ndnAgNTc1IDQ5OQpub2RlL21vdmUgajZmMiAxMDE4IDU4MQpub2RlL21vdmUgMjR1biA5NDggNDc2Cm5vZGUvbW92ZSAzMHVtIDk3NSAzNjMKbm9kZS9tb3ZlIDA0a2ogMTE1NCAz
NjUKb3V0bGV0L2Nvbm5lY3QgeGs0OCBnaGdkIHAyNm4Kb3V0bGV0L2Nvbm5lY3QgMnc4biAxamNwIHl5MmsKb3V0bGV0L2Nvbm5lY3QgdjdqeCBiMWloIGZheWsKb3V0bGV0L2Nvbm5lY3QgeGs0OCA0djNyIDg3YWEKb3V0bGV0L2Nvbm5lY3QgczhqOCAxNng1IHFj
emQKb3V0bGV0L2Nvbm5lY3QgajlhbiBldHR3IDZqbXIKb3V0bGV0L2Nvbm5lY3QgeGs0OCA2MXIwIGF1cDgKb3V0bGV0L2Nvbm5lY3Qgcm15ZSBmdG4wIHhma3UKb3V0bGV0L2Nvbm5lY3QgMXd3diBhMHMyIDZwNGsKb3V0bGV0L2Nvbm5lY3QgbnlvOCBpZ2RrIGZ3
ZWQKb3V0bGV0L2Nvbm5lY3QgODY5YiBuMW93IGliazcKb3V0bGV0L2Nvbm5lY3QgOXdyYiB2azY0IDV4cGEKb3V0bGV0L2Nvbm5lY3QgOWg1NyA2eTRpIGxkNDYKb3V0bGV0L2Nvbm5lY3Qgeno5biAzdGVhIGEyOGIKb3V0bGV0L2Nvbm5lY3QgMGw4bSA0eHl5IHZt
cnEKb3V0bGV0L2Nvbm5lY3QgeThvNyBqazFxIDFmdG8Kb3V0bGV0L2Nvbm5lY3QgMHF2dyB3bnExIDZtYzIKb3V0bGV0L2Nvbm5lY3QgbmxhNSBkNXV4IG1mNjMKb3V0bGV0L2Nvbm5lY3QgbmxhNSBhc3B0IHFqZ2wKbm9kZS91cGRhdGUtaW5sZXQgdjc3eCAxamNw
IHRyaWdnZXJfaW5wdXQgMApub2RlL3VwZGF0ZS1pbmxldCB2Nzd4IDZ5NGkgc2FtcGxlX3NlbGVjdCA2NApub2RlL3VwZGF0ZS1pbmxldCAzeHEyIDBmeTEgYnBtIDEKbm9kZS91cGRhdGUtaW5sZXQgM3hxMiA4NWVqIGRpdmlzaW9uIDUwCm5vZGUvdXBkYXRlLWlu
bGV0IGI4eGUgZ2hnZCBjbG9ja19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGI4eGUgYjFpaCBkaXZpc2lvbl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGk2dm8gNHYzciBjbG9ja19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IGk2dm8gMTZ4NSBkaXZpc2lv
bl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IHZrNTkgNjFyMCBjbG9ja19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IHZrNTkgZXR0dyBkaXZpc2lvbl9pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IHV4ejUgZnRuMCB0cmlnZ2VyX2lucHV0IDAKbm9kZS91cGRh
dGUtaW5sZXQgdXh6NSAzdGVhIHNhbXBsZV9zZWxlY3QgMTI4Cm5vZGUvdXBkYXRlLWlubGV0IHd6NHcgYTBzMiB0cmlnZ2VyX2lucHV0IDAKbm9kZS91cGRhdGUtaW5sZXQgd3o0dyA0eHl5IHNhbXBsZV9zZWxlY3QgMjU2Cm5vZGUvdXBkYXRlLWlubGV0IDIzb3Eg
d25xMSBhdWRpb19pbnB1dCAwCm5vZGUvdXBkYXRlLW91dGxldCB1NWZvIHp6OW4gbnVtYmVyIDEyOApub2RlL3VwZGF0ZS1pbmxldCB1NWZvIGNyMXEgdXNlci12YWx1ZSAxMjgKbm9kZS91cGRhdGUtb3V0bGV0IGUzZTggMGw4bSBudW1iZXIgMjU2Cm5vZGUvdXBk
YXRlLWlubGV0IGUzZTggNnJ2OSB1c2VyLXZhbHVlIDI1Ngpub2RlL3VwZGF0ZS1vdXRsZXQgb2d2cCA5aDU3IG51bWJlciA2NApub2RlL3VwZGF0ZS1pbmxldCBvZ3ZwIGptcjggdXNlci12YWx1ZSA2NApub2RlL3VwZGF0ZS1vdXRsZXQgajZmMiBrN3VpIG51bWJl
ciAxMDIzCm5vZGUvdXBkYXRlLWlubGV0IGo2ZjIgbTZ6dSB1c2VyLXZhbHVlIDEwMjMKbm9kZS91cGRhdGUtb3V0bGV0IDI0dW4gN2dnOCBudW1iZXIgNDAwCm5vZGUvdXBkYXRlLWlubGV0IDI0dW4gbG9pdCB1c2VyLXZhbHVlIDQwMApub2RlL3VwZGF0ZS1vdXRs
ZXQgMzB1bSBubGE1IG51bWJlciA0MDAKbm9kZS91cGRhdGUtaW5sZXQgMzB1bSBrN2xqIHVzZXItdmFsdWUgNDAwCm5vZGUvdXBkYXRlLWlubGV0IDA0a2ogamsxcSBhdWRpb19pbnB1dCAwCm5vZGUvdXBkYXRlLWlubGV0IDA0a2ogZDV1eCBtaXhfaW5wdXQgNDAw
Cm5vZGUvdXBkYXRlLWlubGV0IDA0a2ogYXNwdCBmZWVkYmFja19pbnB1dCA0MDA=
--ENDESPNODEPATCH--

*/

